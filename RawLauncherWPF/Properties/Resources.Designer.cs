//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RawLauncherWPF.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("RawLauncherWPF.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Icon ähnlich wie (Symbol).
        /// </summary>
        internal static System.Drawing.Icon Commander_Appo {
            get {
                object obj = ResourceManager.GetObject("Commander_Appo", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;
        ///	&lt;xs:element name=&quot;FileContainer&quot;&gt;
        ///		&lt;xs:complexType&gt;
        ///			&lt;xs:sequence&gt;
        ///				&lt;xs:element name=&quot;Version&quot; type=&quot;xs:string&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;1&quot; /&gt;
        ///				&lt;xs:element name=&quot;File&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;
        ///					&lt;xs:complexType&gt;
        ///						&lt;xs:sequence&gt;
        ///							&lt;xs:element name=&quot;Name&quot; type=&quot;xs:string&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;1 [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string FileContainer {
            get {
                return ResourceManager.GetString("FileContainer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] FileContainer1 {
            get {
                object obj = ResourceManager.GetObject("FileContainer1", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Byte[].
        /// </summary>
        internal static byte[] FileContainer2 {
            get {
                object obj = ResourceManager.GetObject("FileContainer2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;GameConstants&gt;
        ///
        ///	&lt;!-- Ordered list of hotkey fast load debug maps for keys CTRL+SHIFT+1 through CTRL+SHIFT+9 --&gt;
        ///	&lt;!-- Note: Map names cannot have SPACES in them due to XML parsing! Also, keep ordered CTRL+SHIFT+1 through CTRL+SHIFT+9 --&gt;
        ///	&lt;!-- CTRL+SHIFT+0 is a special key for loading the galactic campaign named in the Debug_Hot_Key_Load_Campaign tag. --&gt;
        ///   &lt;!-- Each map should be paired with a script name entry even if the entry is empty --&gt;
        ///
        ///		&lt;Debug_Hot_Key_Load_Map&gt; .\\D [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string GAMECONSTANTS {
            get {
                return ResourceManager.GetString("GAMECONSTANTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot;?&gt;
        ///&lt;GameConstants&gt;
        ///
        ///	&lt;!-- Ordered list of hotkey fast load debug maps for keys ctrl-SHIFT-1 through SHIFT-9 --&gt;
        ///	&lt;!-- Note: Map names cannon have SPACES in them due to XML parsing! Also, keep ordered SHIFT-1 through SHIFT-9 --&gt;
        ///
        ///	&lt;!--
        ///		&lt;Debug_Hot_Key_Load_Map&gt; .\\Data\\Art\\Maps\\_Desert_E3_Demo_01.ted &lt;/Debug_Hot_Key_Load_Map&gt;
        ///		&lt;Debug_Hot_Key_Load_Map&gt; .\\Data\\Art\\Maps\\E3_Space_Tatooine.ted &lt;/Debug_Hot_Key_Load_Map&gt;
        ///		&lt;Debug_Hot_Key_Load_Map&gt; .\\Data\\Art\\Maps\\Skirmish_De [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string GAMECONSTANTSeaw {
            get {
                return ResourceManager.GetString("GAMECONSTANTSeaw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;GraphicDetailSettings&gt;
        ///
        ///	&lt;GraphicDetailLevelEnumeration&gt;
        ///
        ///        &lt;!--                                                        --&gt;
        ///        &lt;!--  Default Detail sets                                   --&gt;
        ///        &lt;!--                                                        --&gt;
        ///
        ///        &lt;!-- Lowest default detail, de-res the textures, use fixed function pipe and crappy water --&gt;
        ///		&lt;GraphicDetailLevel name=&quot;Default_0&quot;&gt;
        ///			&lt;ScreenResolutionWidth&gt;800&lt;/ScreenResolut [Rest der Zeichenfolge wurde abgeschnitten]&quot;; ähnelt.
        /// </summary>
        internal static string GRAPHICDETAILS {
            get {
                return ResourceManager.GetString("GRAPHICDETAILS", resourceCulture);
            }
        }
    }
}
